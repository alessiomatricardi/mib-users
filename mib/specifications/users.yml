openapi: "3.0.1"
info:
  title: Users Service API
  description: Users Microservice of Message in a Bottle Application
  version: "0.1"

servers:
  - url: /

paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - Users
      operationId: mib.resources.users.register
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/RegisterUser'
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "Successfully registered"
                    default: 'failure'
                    
        200:
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or Already present"
                    default: 'failure'
        default:
          description: Error during creation of the user

  /users/{user_id}:
    get:
      tags: [ Users ]
      description: Get a user by its id
      operationId: mib.resources.users_new.get_user #_user_details
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user

    delete:
      tags: [ Users ]
      description: Delete a user by its id
      operationId: mib.resources.users.delete_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: User deleted
        404:
          description: User not found
        default:
          description: An error occured during the deletion the user

  /user_email/{user_email}:
    get:
      tags: [ Users ]
      description: Get a user by its email
      operationId: mib.resources.users.get_user_by_email
      parameters:
        - name: user_email
          description: User Unique Email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user

  /login:
    post:
      summary: Login a user
      tags: [ Users ]
      operationId: mib.resources.auth.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: auth
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@studenti.unipi.it
                password:
                  type: string
                  example: abcd123A
      responses:
        200:
          description: User credentials are correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  user:
                    $ref: '#/components/schemas/User'

        401:
          description: User credentials are not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
        default:
          description: An error occured during login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string        

components:
  schemas:
    User:
      required:
        - firstname
        - lastname
        - email
        - date_of_birth
      type: object
      properties:
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
          format: email
        date_of_birth:
          type: string
          description: Customer birthdate
          example: '2020-01-01'
          format: date
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 8
          maxLength: 127
    
    RegisterUser:
      required:
        - firstname
        - lastname
        - email
        - date_of_birth
        - password
      type: object
      properties:
        firstname:
          type: string
          description: First name of user
          example: Mario
          maxLength: 127
        lastname:
          type: string
          description: Last name of user
          example: Rossi
          maxLength: 127
        email:
          type: string
          description: User email
          example: mario.rossi@example.org
          format: email
          maxLength: 127
        date_of_birth:
          type: string
          description: User birthdate
          example: '2020-01-01'
          format: date
        password:
          type: string
          description: User password
          example: 'abcd1234'
          minLength: 8
          maxLength: 127
    
    UpdateUser:
      required:
        - email
        - password
        - phone
      type: object
      properties:
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
          format: email
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 5
          maxLength: 127
        phone:
          type: string
          description: Customer phone number
          example: '+39 3332222384'
          minLength: 10
          maxLength: 25