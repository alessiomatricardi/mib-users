openapi: "3.0.1"
info:
  title: Users Service API
  description: Users Microservice of Message in a Bottle Application
  version: "0.1"

servers:
  - url: /

paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - Users
      operationId: mib.resources.users.register
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/RegisterUser'
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "Successfully registered"
                    default: 'failure'
                    
        200:
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or Already present"
                    default: 'failure'
        default:
          description: Error during creation of the user

  /unregister:
    post:
      summary: Unregister an user
      tags:
        - Users
      operationId: mib.resources.users.unregister
      requestBody:
        description: Unregister an user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnregisterUser'
      responses:
        200:
          description: Unregistered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'success'
                  message:
                    type: string
                    description: "It can be failure or Successfully unregistered"
                    default: 'Successfully unregistered'
                    
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or Unauthorized"
                    default: 'Unauthorized'
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or User not found"
                    default: 'User not found'
        default:
          description: Error during unregistration of the user
  
  /profile/data:
    post:
      summary: Modify personal information of the user
      tags:
        - Users
      operationId: mib.resources.users.modify_data
      requestBody:
        description: Modify personal information of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        200:
          description: User data correctley updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'success'
                  message:
                    type: string
                    description: "It can be failure or Modified"
                    default: 'Modified'
                    
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or User not found"
                    default: 'User not found'
        
        default:
          description: Error during modify personal data
  
  /profile/password:
    post:
      summary: Modify password of the user
      tags:
        - Users
      operationId: mib.resources.users.modify_password
      requestBody:
        description: Modify password of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPassword'
      responses:
        200:
          description: User password correctley updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'success'
                  message:
                    type: string
                    description: "It can be failure or Modified"
                    default: 'Modified'

        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or Unauthorized"
                    default: 'Unauthorized'
        
        403:
          description: New and repeated passwords are different
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or New and repeated passwords are different"
                    default: 'New and repeated passwords are different'

        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or User not found"
                    default: 'User not found'
        
        409:
          description: Password not changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or Password not changed"
                    default: 'Password not changed'
        
        default:
          description: Error during the modification of the personal data

  /profile/content_filter:
    post:
      summary: Enable/disable content_filter of the user
      tags:
        - Users
      operationId: mib.resources.users.modify_content_filter
      requestBody:
        description: Enable/disable content_filter of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileContentFilter'
      responses:
        200:
          description: Content filter correctley enabled/disabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'success'
                  message:
                    type: string
                    description: "It can be failure or Modified"
                    default: 'Modified'
                  enabled:
                    type: boolean
                    description: "It can be true or false"
                    default: true

        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or User not found"
                    default: 'User not found'
          
        default:
          description: Error during the modification of the profile picture

  /profile/picture:
    post:
      summary: Modify profile picture of the user
      tags:
        - Users
      operationId: mib.resources.users.modify_profile_picture
      requestBody:
        description: Modify profile picture of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfilePicture'
      responses:
        200:
          description: User profile picture correctley updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'success'
                  message:
                    type: string
                    description: "It can be failure or Modified"
                    default: 'Modified'

        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or User not found"
                    default: 'User not found'
          
        500:
          description: Internal server error in saving the image
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or User not found"
                    default: 'Image not saved'
        
        default:
          description: Error during the modification of the profile picture
  
  /users/{user_id}:
    get:
      tags: [ Users ]
      description: Get a user by its id
      operationId: mib.resources.users.get_user #_user_details
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured while retrieving the user
  
  /users/{user_id}/picture:
    get:
      tags: [ Users ]
      description: Get a user picture by its id
      operationId: mib.resources.users.get_profile_picture 
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user profile picture in different format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  image:
                    type: string
                    format: base64
                  image_100:
                    type: string
                    format: base64
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  message:
                    type: string
                    description: "It can be failure or User not found"
                    default: 'User not found'
        default:
          description: An error occured while retrieving the user
        
  /user_email/{user_email}:
    get:
      tags: [ Users ]
      description: Get a user by its email
      operationId: mib.resources.users.get_user_by_email
      parameters:
        - name: user_email
          description: User Unique Email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured while retrieving the user

  /login:
    post:
      summary: Login a user
      tags: [ Users ]
      operationId: mib.resources.auth.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: auth
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@studenti.unipi.it
                password:
                  type: string
                  example: abcd123A
      responses:
        200:
          description: User credentials are correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  user:
                    $ref: '#/components/schemas/User'

        401:
          description: User credentials are not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
        default:
          description: An error occured during login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string        

components:
  schemas:
    User:
      required:
        - firstname
        - lastname
        - email
        - date_of_birth
      type: object
      properties:
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
          format: email
        date_of_birth:
          type: string
          description: Customer birthdate
          example: '2020-01-01'
          format: date
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 8
          maxLength: 127
    
    RegisterUser:
      required:
        - firstname
        - lastname
        - email
        - date_of_birth
        - password
      type: object
      properties:
        firstname:
          type: string
          description: First name of user
          example: Mario
          maxLength: 127
        lastname:
          type: string
          description: Last name of user
          example: Rossi
          maxLength: 127
        email:
          type: string
          description: User email
          example: mario.rossi@example.org
          format: email
          maxLength: 127
        date_of_birth:
          type: string
          description: User birthdate
          example: '2020-01-01'
          format: date
        password:
          type: string
          description: User password
          example: 'abcd1234'
          minLength: 8
          maxLength: 127
    
    UnregisterUser:
      required:
        - id
        - password
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID of the user
          example: 123
        password:
          type: string
          description: User password
          example: 'abcd1234'
          minLength: 8
          maxLength: 127
    
    UpdateUser:
      required:
        - id
        - firstname
        - lastname
        - date_of_birth
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID of the user
          example: 123
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        date_of_birth:
          type: string
          description: Customer birthdate
          example: '2020-01-01'
          format: date

    UpdateProfilePicture:
      required:
        - id
        - image
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID of the user
          example: 123
        image:
          type: string
          format: base64
          description: base64 encoding of new profile picture
    
    UpdateUserPassword:
      required:
        - id
        - old_password
        - new_password
        - repeat_new_password
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID of the user
          example: 123
        old_password:
          type: string
          description: Actual password of the user
          example: 'prova123'
          minLength: 8
          maxLength: 127
        new_password:
          type: string
          description: New password of the user
          example: 'abcd1234'
          minLength: 8
          maxLength: 127
        repeat_new_password:
          type: string
          description: Repeated new password of the user
          example: 'abcd1234'
          minLength: 8
          maxLength: 127

    UpdateProfileContentFilter:
      required:
        - id
        - content_filter
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID of the user
          example: 123
        content_filter:
          type: boolean
          description: Content filter enabled
          example: true